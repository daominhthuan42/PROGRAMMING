
PREPARATION
1. Copy the workspace from server
\\rvc-vnas-01\Training\201909SW\OOP\01.FinalExercise\00.Requirements
and store in your local disk.
2. Extract the workspace and start eclipse with this workspace.
3. Try to run project “FinalExercise_PluginExample” in the workspace. If there is no error, the workspace is ready for doing exercise. Otherwise, contact your instructor.

EXERCISE 1
Purpose:
Review your understanding about Class, Encapsulation, Abstraction of OO concept.

Requirement:
Developer team is creating new drawing software. This software supports user to draw, color, move, delete objects on 2D space: Circle, Square, Rectangle, Triangle, Line and Point. On the GUI, there are some textboxes to show the Area and Perimeter of selected object.
Notice that Area and Perimeter will be displayed for Circle, Square, Rectangle and Triangle.

Your task:
Your task is supporting Developer team to create new classes to store the information and behavior of those 2D objects. Remember using Abstract class or Interface or both to show up yourself as a good OOP designer.
EXERCISE 2
Purpose:
Review your understanding about inheritance and interface of OO concept.

Requirement:
As you known, plugin is a good way to upgrade your software. To use a new plugin, user does not need to re-install the software, just needs to put the plugin file into a specified folder. You will have change to create a new plugin for an existing software. Your new plugin will contain the followings:
	Plugin’s name. Such as: Phuong Nguyen’s plug-in
	Plugin’s version. Such as: V1.1.1
	Author name. Such as: PHUONG Ba Nguyen
	Author code (Your code). Such as: 1632
	An English message. Such as: Hello!! I’m Phuong.

Your task:
A. Create new plugin
1. Create new JAVA project, the project name must be in format:
FinalExercise_PluginExample_Plugin<Your Code>
2. Add library that contains the common interface: Right-click on your project → “Buid Path” → “Configure Build Path…” → dialog will appear:
 
On the dialog, select tab “Libraries” → “Add External JARs…” → find and select “FinalExercise_PluginExample_Lib.jar” in your workspace → “Apply and Close”.
3. Create new package that will contain source code, you can decide the package name.
4. In your package, create new class to implement your plugin. The class name must be in format:
Plugin<YourName><YourCode>
Example: PluginPhuongNguyen1632
5. In your class, implement interface “IPluginTemplate”:
	doFunctionality(): will print an English message.
	getAuthorCode(): return your code.
	getAuthorName(): return your full name.
	getPluginName(): return your plugin’s name.
	getVersion(): return plugin’s version.
You can print text to console using System.out.println().
6. Export your plugin: Right-click on your project → “Export…” → “JAR file” → “Next” → Set name for your jar file → “Finish”
Name must be in format:
FinalExercise_PluginExample_Plugin<YourCode>

B. Run your plugin
1. Set your plugin folder: On drive “D”, create new folder name “plugins”.
2. Run class “Executor” inside project “FinalExercise_PluginExample”, you will see the following text on the console:
Start executing all plugins!!
<No plugin>
Program end!!

3. Now put 2 plugin files into “plugins” folder. Then re-run the program.
	“FinalExercise_PluginExample_Plugin01.jar”
	“FinalExercise_PluginExample_Plugin02.jar”
You will see the following text on the console:
Start executing all plugins!!
Plugin name: Phuong Nguyen's plug-in
Author: PHUONG Ba Nguyen - 1632
Plugin version: V1.0.0
Hello!! I'm Phuong. This is an example for plug-in.

Plugin name: Phuong Nguyen's plug-in again
Author: PHUONG Ba Nguyen - 1632
Plugin version: V5.1.0
Hello!! I'm Phuong Nguyen again. This is my plugin.
Program end!!

4. Put your plugin into “plugins” folder. Now run the program and enjoy your output.
5. Get 1-2 plugins from your parners and put into “plugins” folder. Run the program and check the console.

SUBMISSION
1. Exercise 1: Compress the source folder (using 7z format, no password).
2. Exercise 2: Compress (using .7z format, no password) the workspace and rename it to <YourName><YourCode>.

Submit your plugin (.jar file) and .7z files as output of this exercise.
Copy the them to \\rvc-vnas-01\Training\201809SW\OOP\03. Final exercise\00. Design and Coding exercise\01. Output\<YourCode>.

The end!!

https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=20&cad=rja&uact=8&ved=2ahUKEwja6ruUw5ToAhWJMN4KHTsFBHgQFjATegQIAxAB&url=http%3A%2F%2Fmath.hws.edu%2Feck%2Fcs124%2Fjavanotes6%2Fsource%2FShapeDraw.java&usg=AOvVaw3feYIGT6gi-urd-ORq0PxY


https://github.com/Jimicy/Java-SuperPaint-Application

Graphics2D g2 = (Graphics2D) g.create();
		g2.setColor(Color.RED);
		g2.setPaint(GRADIENT_PAINT);
		g2.fill(myPath);
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
		
